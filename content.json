{"meta":{"title":"tangll","subtitle":null,"description":"唐龙隆个人博客","author":"tangll","url":"https://gtntangll.github.io"},"pages":[],"posts":[{"title":"nginx的目录和配置语法","slug":"nginx的目录和配置语法","date":"2017-11-10T05:30:34.000Z","updated":"2017-11-10T05:40:26.000Z","comments":true,"path":"2017/11/10/nginx的目录和配置语法/","link":"","permalink":"https://gtntangll.github.io/2017/11/10/nginx的目录和配置语法/","excerpt":"","text":"一、nginx的各种安装目录 路径 类型 作用 /etc/logrotate.d/nginx 配置文件 nginx日志轮转用于logrotate服务的日志切割 /etc/nginx/nginx.conf/etc/nginx/conf.d/default.conf 配置文件 nginx主配置文件 /etc/nginx/fastcgi_params/etc/nginx/uwsgi_params/etc/nginx/scgi_params 配置文件 cgi配置相关fastcgi配置 /etc/nginx/koi-utf/etc/nginx/win-utf/etc/nginx/koi-win 配置文件 编码转换映射转化文件 /etc/nginx/mime.types 配置文件 设置http协议的Content-Type与扩展名对应关系 处理一些识别不了的扩展名的时候需要用到 /usr/lib/systemd/system/nginx.service/usr/lib/systemd/system/nginx-debug.service/etc/sysconfig/nginx/etc/sysconfig/nginx-debug 配置文件 用于配置出系统守护进程管理器管理方式 /usr/sbin/nginx/usr/sbin/nginx-debug 命令 nginx服务终端命令 /usr/share/doc/nginx-1.12.2/COPYRIGHT/usr/share/man/man8/nginx.8.gz 文件、目录 nginx的手册和帮助文件 /var/cache/nginx/ 目录 nginx的缓存目录 /var/log/nginx/ 目录 nginx的日志目录 二、nginx的编译配置参数命令nginx -V 输出的就是nginx编译时候用到的参数 编译选项 作用 –prefix=/etc/nginx–sbin-path=/usr/sbin/nginx–modules-path=/usr/lib64/nginx/modules–conf-path=/etc/nginx/nginx.conf–error-log-path=/var/log/nginx/error.log–http-log-path=/var/log/nginx/access.log–pid-path=/var/run/nginx/pid–lock-path=/var/run/nginx.lock 安装目的目录或路径 –httpd-client-body-temp-path=/var/cache/nginx/client_temp–httpd-proxy-temp-path=/var/cache/nginx/proxy_temp–http-fastcgi-temp-path=/var/cache/nginx/fastcgi_temp–http-uwsgi-temp-path=/var/cache/nginx/uwsgi_temp–http-scgi-temp-path=/var/chache/nginx/scgi_temp 执行对应模块时，Nginx所保留的临时性文件 –user=nginx–group=nginx 设定Nginx进程启动的用户和组用户 –with-cc-opt=parameters 设置额外的参数将被添加到CFLAGS变量 –with-ld-opt=parameters 设置附加的参数，连接系统库 三、nginx.conf基础配置语法 nginx.conf基础配置语法nginx.conf 作为主配置文件include /etc/nginx/conf.d/*.conf 读到这会把该目录的.conf也读进来 全局性的和服务级别的user设置使用用户worker_processes进行增大并发连接数的处理(最好设置跟cpu保持一致)error_lognginx的错误日志pidnginx服务启动时候pid event对事件的模块worker_connections一个进程允许处理的最大连接数use定义使用的内核模型 http&#123; server&#123; listen 80; //端口 server_name localhost; //域名 location / //子目录和当前目录 &#123; root /usr/share/nginx/html; //指定目录 index index.html index.htm //默认访问页面 &#125; error_page 500 502 503 504 /50.html location = /50x.html&#123; root /usr/share/nginx/html; &#125; &#125; server&#123; ... ... &#125;&#125; 修改配置文件后需要重启nginx重启nginx(进程停掉,重新启动一次)systemctl restart nginx.service不关闭服务柔和地重启(重新读取一次配置文件)systemctl reload nginx.service","categories":[],"tags":[{"name":"技术分享","slug":"技术分享","permalink":"https://gtntangll.github.io/tags/技术分享/"},{"name":"nginx","slug":"nginx","permalink":"https://gtntangll.github.io/tags/nginx/"}]},{"title":"nginx快速安装","slug":"nginx基础笔记-一-nginx快速安装","date":"2017-11-09T08:34:13.000Z","updated":"2017-11-10T05:31:30.000Z","comments":true,"path":"2017/11/09/nginx基础笔记-一-nginx快速安装/","link":"","permalink":"https://gtntangll.github.io/2017/11/09/nginx基础笔记-一-nginx快速安装/","excerpt":"","text":"一、介绍 写此nginx从入门到实践系列笔记,为以教促学,让自己系统地学习掌握nginx的配置和搭建高可用架构。系统环境:centos7.2 二、nginx快速安装 访问nginx官网:nginx.org 点击download后选择最底下 stable version(稳定版本)的链接找到这里:在系统新建nginx.repo并将此官网的yum源拷贝进去vim /etc/yum.repos.d/nginx.repo 接着修改OS和OSRELEASE，我的环境为centos7.2系统故我修改如下[nginx]name=nginx repobaseurl=http://nginx.org/packages/mainline/centos/7/$basearch/gpgcheck=0enabled=1 保存后测试yum list |grep nginx 出现该列表则为成功添加接下来便可直接使用yum install nginx 来安装nginx安装完毕后测试:nginx -v 打印出nginx版本则为安装成功 三、启动nginx 安装完毕后我们来启动nginx:sudo systemctl start nginx.service 此时便可通过域名或者ip访问web页面来预览nginx的默认页面:设置开机启动nginx:sudo systemctl enable nginx.service 到此便是安装完成","categories":[],"tags":[{"name":"技术分享","slug":"技术分享","permalink":"https://gtntangll.github.io/tags/技术分享/"},{"name":"nginx","slug":"nginx","permalink":"https://gtntangll.github.io/tags/nginx/"}]},{"title":"python爬取贴吧帖子","slug":"python爬取贴吧帖子","date":"2017-10-20T07:03:39.000Z","updated":"2017-11-10T04:04:15.000Z","comments":true,"path":"2017/10/20/python爬取贴吧帖子/","link":"","permalink":"https://gtntangll.github.io/2017/10/20/python爬取贴吧帖子/","excerpt":"","text":"一、介绍 我们常遇到一些很长的贴吧连载帖子想存到本地再看此文就是运用python爬取指定百度贴吧的帖子并存到本地满足需求环境:python2.7目标网页:【长篇连载】剑网3的正史和野史——从头开始讲剧情故事源码存放:源码github本文参考:静觅博客python实战系列 二、页面的抓取 目标网页网址为https://tieba.baidu.com/p/2196794546满足可以选择是否只看楼主的抓取我们点一下 只看楼主 并点一下后页的链接来获取只看楼主和翻页的参数这时候可以看到只看楼主多出的参数 see_lz 和当前页的参数 pn 接下来定义一个DEMO类开始获取整个网页# -*- coding:utf-8 -*-import urllibimport urllib2import reclass DEMO: def __init__(self,baseUrl): self.baseURL = baseUrl def getPage(self): url = baseURL request = urllib2.Request(url) response = urllib2.urlopen(request) print response.read()baseURL = 'https://tieba.baidu.com/p/2196794546?see_lz=1&amp;pn=3'demo = DEMO(baseURL)demo.getPage() 运行结果: 爬取网页代码成功后我们完善一下代码,将只看楼主和页码提为参数 def __init__(self,baseUrl,seeLZ): self.baseURL = baseUrl self.seeLZ = '?see_lz=' +str(seeLZ) self.tool = Tool() def getPage(self,pageNum): try: url = self.baseURL+self.seeLZ + '&amp;pn=' + str(pageNum) request = urllib2.Request(url) response = urllib2.urlopen(request) return response.read().decode('utf-8') except urllib2.URLError, e: if hasattr(e,\"reson\"): print u\"链接失败,原因:\",e.reason return None 三、提取出想要的信息 打开目标网页审查元素（F12）首先找到帖子标题的代码段: &lt;h3 class=\"core_title_txt pull-left text-overflow \" title=\"【长篇连载】剑网3的正史和野史——从头开始讲剧情故事\" style=\"width: 416px\"&gt;【长篇连载】剑网3的正史和野史——从头开始讲剧情故事&lt;/h3&gt; 我们将提取此h3里的文本则正则表达式为:&lt;h3 class=\"core_title_txt.*?&gt;(.*?)&lt;/h3&gt; 接下来我们就可以写一个提取标题的方法:def getTitle(self,title): page = self.getPage(1) pattern = re.compile('&lt;h3 class=\"core_title_txt.*?&gt;(.*?)&lt;/h3&gt;',re.S) result = re.search(pattern,page) if result: return result.group(1).strip() else: return None 同理找到帖子页数的代码段,可得出提取页数的正则:&lt;li class=\"l_reply_num\".*?&lt;/span&gt;.*?&lt;span.*?&gt;(.*?)&lt;/span&gt; 提取页数的方法:def getPageNum(self,page): page = self.getPage(1) pattern = re.compile('&lt;li class=\"l_reply_num\".*?&lt;/span&gt;.*?&lt;span.*?&gt;(.*?)&lt;/span&gt;',re.S) result = re.search(pattern,page) if result: return result.group(1).strip() else: return None 接下来是我们主要目的,提取正文,正则为:&lt;div id=\"post_content_.*?&gt;(.*?)&lt;/div&gt; 这个正则提取出来的只是div里面的文本内容,它还会包括了图片标签，换行符，段落符等的标签。所以我们还需处理一下。这时候添加一个类利用正则将这些标签都替换掉class Tool: removeImg = re.compile('&lt;img.*?&gt;| &#123;7&#125;|') removeAddr = re.compile('&lt;a.*?&gt;|&lt;/a&gt;') replaceLine = re.compile('&lt;tr&gt;|&lt;div&gt;|&lt;/div&gt;|&lt;/p&gt;') replaceTD = re.compile('&lt;td&gt;') replacePara = re.compile('&lt;p.*?&gt;') replaceBR = re.compile('&lt;p.*?&gt;') replaceBR = re.compile('&lt;br&gt;&lt;br&gt;|&lt;br&gt;') removeExtraTag = re.compile('&lt;.*?') def replace(self,x): x = re.sub(self.removeImg,\"\",x) x = re.sub(self.removeAddr,\"\",x) x = re.sub(self.replaceLine,\"\\n\",x) x = re.sub(self.replaceTD,\"\\t\",x) x = re.sub(self.replacePara,\"\\n \",x) x = re.sub(self.replaceBR,\"\\n\",x) x = re.sub(self.removeExtraTag,\"\",x) return x.strip() 初始化类后,我们可以写提取正文的方法:def getContent(self,page): pattern = re.compile('&lt;div id=\"post_content_.*?&gt;(.*?)&lt;/div&gt;',re.S) items = re.findall(pattern,page) contents = [] for item in items: content = \"\\n\" + self.tool.replace(item) + '\\n' contents.append(content.encode('utf-8')) return contents 四、写入文件,保存为txtdef setFileTitle(self,title): if title is not None: self.file = open(title + \".txt\",\"w+\") else: self.file = open(self.defaultTitle + \".txt\",\"w+\") def writeData(self,contents): for item in contents: self.file.write(item) 五、完善代码有了以上的方法作为基础，我们来写运行的方法:def start(self): indexPage = self.getPage(1) pageNum = self.getPageNum(indexPage) title = self.getTitle(indexPage) self.setFileTitle(title) if pageNum == None: print \"URL已失效,请重试\" return None try: print \"该帖子共有\" + str(pageNum) + \"页\" for i in range(1,int(pageNum)+1): print \"正在写入第\" + str(i) + \"页数据\" page = self.getPage(i) contents = self.getContent(page) self.writeData(contents) except IOError,e: print \"写入异常,原因\" + e.message finally: print \"写入任务完成\" 此时完成的代码:# -*- coding:utf-8 -*-import urllibimport urllib2import reclass Tool: removeImg = re.compile('&lt;img.*?&gt;| &#123;7&#125;|') removeAddr = re.compile('&lt;a.*?&gt;|&lt;/a&gt;') replaceLine = re.compile('&lt;tr&gt;|&lt;div&gt;|&lt;/div&gt;|&lt;/p&gt;') replaceTD = re.compile('&lt;td&gt;') replacePara = re.compile('&lt;p.*?&gt;') replaceBR = re.compile('&lt;p.*?&gt;') replaceBR = re.compile('&lt;br&gt;&lt;br&gt;|&lt;br&gt;') removeExtraTag = re.compile('&lt;.*?') def replace(self,x): x = re.sub(self.removeImg,\"\",x) x = re.sub(self.removeAddr,\"\",x) x = re.sub(self.replaceLine,\"\\n\",x) x = re.sub(self.replaceTD,\"\\t\",x) x = re.sub(self.replacePara,\"\\n \",x) x = re.sub(self.replaceBR,\"\\n\",x) x = re.sub(self.removeExtraTag,\"\",x) return x.strip()class DEMO: def __init__(self,baseUrl,seeLZ): self.baseURL = baseUrl self.seeLZ = '?see_lz=' +str(seeLZ) self.tool = Tool() def getPage(self,pageNum): try: url = self.baseURL+self.seeLZ + '&amp;pn=' + str(pageNum) request = urllib2.Request(url) response = urllib2.urlopen(request) return response.read().decode('utf-8') except urllib2.URLError, e: if hasattr(e,\"reson\"): print u\"链接失败,原因:\",e.reason return None def getTitle(self,title): page = self.getPage(1) pattern = re.compile('&lt;h3 class=\"core_title_txt.*?&gt;(.*?)&lt;/h3&gt;',re.S) result = re.search(pattern,page) if result: return result.group(1).strip() else: return None def getPageNum(self,page): page = self.getPage(1) pattern = re.compile('&lt;li class=\"l_reply_num\".*?&lt;/span&gt;.*?&lt;span.*?&gt;(.*?)&lt;/span&gt;',re.S) result = re.search(pattern,page) if result: return result.group(1).strip() else: return None def getContent(self,page): pattern = re.compile('&lt;div id=\"post_content_.*?&gt;(.*?)&lt;/div&gt;',re.S) items = re.findall(pattern,page) contents = [] for item in items: content = \"\\n\" + self.tool.replace(item) + '\\n' contents.append(content.encode('utf-8')) return contents def setFileTitle(self,title): if title is not None: self.file = open(title + \".txt\",\"w+\") else: self.file = open(self.defaultTitle + \".txt\",\"w+\") def writeData(self,contents): for item in contents: self.file.write(item) def start(self): indexPage = self.getPage(1) pageNum = self.getPageNum(indexPage) title = self.getTitle(indexPage) self.setFileTitle(title) if pageNum == None: print \"URL已失效,请重试\" return None try: print \"该帖子共有\" + str(pageNum) + \"页\" for i in range(1,int(pageNum)+1): print \"正在写入第\" + str(i) + \"页数据\" page = self.getPage(i) contents = self.getContent(page) self.writeData(contents) except IOError,e: print \"写入异常,原因\" + e.message finally: print \"写入任务完成\"print u\"请输入帖子代号\"baseURL = 'http://tieba.baidu.com/p/' + str(raw_input(u'http://tieba.baidu.com/p/'))seeLZ = raw_input(\"是否只获取楼主发言,是输入1,否输入0\\n\")demo = DEMO(baseURL,seeLZ)demo.start() 好我们来运行一下试试:到这里输入目标网页的代号:整个运行过程:好,这时候该目录下多了这个txt文件,打开看看 文本已经成功存到本地,到这里就成功了。","categories":[],"tags":[{"name":"技术分享","slug":"技术分享","permalink":"https://gtntangll.github.io/tags/技术分享/"},{"name":"python","slug":"python","permalink":"https://gtntangll.github.io/tags/python/"}]}]}